<?php declare(strict_types=1);
/**
 * This program is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * @license AGPL-3.0-or-later
 * @author KampfCaspar <code@kampfcaspar.ch>
 */

namespace KampfCaspar\Language\Registry;

use Psr\Log\LoggerAwareInterface;
use Psr\Log\LoggerAwareTrait;
use Psr\Log\LoggerInterface;

use const KampfCaspar\Language\Registry\Util\REGISTRY;
require_once('Util/StaticRegistryResource.php');

/**
 * IANA Language Subtag Registry read from static file
 *
 * Registry implementation that reads its data from the autogenerated
 * {@see Util/StaticRegistryResource.php}.
 * Use {@see ImportRegistryFileCommand} to update the static file.
 */
class StaticRegistry implements LoggerAwareInterface, RegistryInterface
{
	use LoggerAwareTrait;

	public function __construct(?LoggerInterface $logger = null)
	{
		if ($logger) {
			$this->setLogger($logger);
		}
	}

	public function getRegistryEntry(string $type, string $subtag): array
	{
		$subtag = strtolower($subtag);
		$private = match($type) {
			'language' => $subtag >= 'qaa' && $subtag <= 'qtz',
			'script'   => $subtag >= 'qaaa' && $subtag <= 'qabx',
			'region'   => $subtag == 'aa'
			              || ($subtag >= 'qm' && $subtag <= 'qz')
			              || ($subtag >= 'xa' && $subtag <= 'xz')
			              || $subtag == 'zz',
			default    => false,
		};
		if ($private) {
			$this->logger?->notice('accept private subtag "{subtag}" for type "{type}"', [
				'subtag' => $subtag,
				'type'   => $type,
			]);
			return ['Type' => $type];
		}
		if (isset(REGISTRY[$type][$subtag])) {
			return REGISTRY[$type][$subtag] + ['Type' => $type];
		}
		$this->logger?->notice('could not find subtag "{subtag}" for type "{type}"', [
			'subtag' => $subtag,
			'type'   => $type,
		]);
		return [];
	}

}
