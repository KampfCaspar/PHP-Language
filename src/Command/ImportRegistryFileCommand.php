<?php declare(strict_types=1);
/**
 * This program is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * @license AGPL-3.0-or-later
 * @author KampfCaspar <code@kampfcaspar.ch>
 */


namespace KampfCaspar\Language\Command;

use KampfCaspar\Language\Registry\Util\RegistryReader;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

class ImportRegistryFileCommand extends Command
{
	const SOURCE_IANA = 'https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry';
	const SOURCE_LOCAL = __DIR__ . '/../../res/language-subtag-registry.txt';
	const TARGET_LOCAL = __DIR__ . '/../Registry/Util/StaticRegistryResource.php';

	protected function configure(): void
	{
		$this->setDefinition([
			new InputOption('download', null, InputOption::VALUE_NONE, 'Download the registry file from IANA'),
			new InputArgument('source', InputArgument::OPTIONAL, 'Source file to import'),
		]);
	}

	public function execute(InputInterface $input, OutputInterface $output): int
	{
		if ($input->getOption('download')) {
			$source = self::SOURCE_IANA;
		}
		else {
			$source = $input->getArgument('source') ?: self::SOURCE_LOCAL;
		}
		$fh = fopen($source, 'r');

		$line = explode(':', fgets($fh));
		$separator = trim(fgets($fh));
		if ($line[0] !== 'File-Date' || $separator !== '%%') {
			throw new \InvalidArgumentException('no correct registry file read');
		}
		$date = trim($line[1]);

		$registry = RegistryReader::fromStream($fh);
		fclose($fh);

		$fh = fopen(self::TARGET_LOCAL, 'w');
		fputs($fh, "<?php declare(strict_types=1); // autogenerated file, do not edit\n\n");
		fputs($fh, "namespace KampfCaspar\\Language\\Registry\\Util;\n");
		fprintf($fh, "const REGISTRY_DATE = '%s';\n", $date);
		fputs($fh, 'const REGISTRY = ');
		fputs($fh, var_export($registry, true));
		fputs($fh, ';');
		fclose($fh);

		$output->writeln('imported registry:');
		foreach ($registry as $key => $value) {
			$output->writeln($key . ' (' . count($value) . ')');
		}
		return Command::SUCCESS;
	}
}